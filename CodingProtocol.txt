### Build management ###

- When adding new artifacts to the pom.xml file, always refer to a specific version of an artifact. If you don't do this, maven may attempt to download the newest version, while the code has not been adapted yet. E.g. you can run into missing goals (because they were deprecated), your code may not compile (because the code refers to deprecated classes), etc. etc.



### Source code layout ###

- Use spaced tabs, so each tab should consist of whitespaces, and not a TAB symbol.
   - Recommended: set your text editor to automatically convert the TAB-key to whitespaces.

- Use tab size = 3 spaces
   - Recommended: set your text editor to a tab-width of 3 spaces.

- In general, follow the following style when using curly brackets for program blocks:

def intelligentMethod() =
{  [here code]
   [etc.]
}

- Start the code on the same line as the opening curly bracket, just as in the example above. So don't do this:
def intelligentMethod() =
{  
   [here code]
   [etc.]
}

- An alternative style for short program blocks is the following:

case Some(constLoc)   => { println("   Constitution id:" + idLoc); constLoc }

- But a space after each comma (',') separating a parameter:

def intelligentMethod(x:Int, y:Int, z:Int)

- Preferably place whitespaces around infix operators and other infix symbols, such as +, ++, =>, and ==:

if( x == 5 ) 
{  [do this]
}

- Other aspects: do as one sees fit. For example, the following style is also allowed (no space after '(' and before ')')

if(x == 5)

- Vertically align => symbols after cases:

list match
{  case Nil => None
   case _   => Some(list(rs.nextInt(list.length)))
}

- A complete example is the following:

object RandomExtras
{  def nextBetween(ranSeq:Random, min:Int, max:Int):Int = 
   {  min + ranSeq.nextInt( max - min + 1 )
   }

   def pickRandomElementFromList[A](list:List[A], rs:Random):Option[A] =
   {  list match
      {  case Nil => None
         case _   => Some(list(rs.nextInt(list.length)))
      }
   }
}

- The indentation of package-blocks deviates from the standard, there is no indentation:

package sky.with.high.clouds
{

[here first line of code]

}

- In any assignment, a long right hand side, consists of one single statement (not enclosed in { }) should in general be written as follows:

val currentUserId:Int =
   Player.currentUserId match
   {  case Full(id)  => { id.toInt }
      case _         => { throw new RuntimeException("  No user id found.") }
   }

def function(x:Int) =
   Player.currentUserId match
   {  case Full(id)  => { id.toInt }
      case _         => { throw new RuntimeException("  No user id found.") }
   }


- If there is a locally good reason, one may locally deviate from the code layout rules defined in this document. An example are Domain Specific Languages created within Scala.

TODO examples



### Naming conventions ###

- Make use of lower case camel case for variable names

Good:
playersWithRelease1


- Make use of upper case camel case for datatypes (class names etc.)

Good:
class CoreContent


- Give meaningful names to all variables, even local variables. This will make the code much more readable, especially for others.

Good:

playersWithThisRelease.map(
   player => 
   {  [code here] 
   }
)

Not good:

taglist.map( x => log(x.getName) )

- The more local a variable is, the more "cryptic" the meaningful name may be (saving typing time), for example, you can use abbreviations.

Very good

taglist.map( tag => log(tag.getName) )

But because it is a very local variable, the following "super-abbreviation" would be OK too:

taglist.map( t => log(t.getName) )

Even such short abbreviations, instead of completley "meaningless" variable names, may help many others tremendously to read your code more quickly. In thought, speaking the statement aligns with the natural language terms associated with it:

taglist.map( t"ag" => log(t"ag".getName ) )

Not good:

taglist.map( x => log(x.getName) )

This "breaks" fluency reading and understanding the code immediately:

taglist.map( x"x? o yeah, wait, that is a tag" => log(x "hmm, what was it again, lets look back at the beginnen of the statement 'taglist' - ah oh yeah x is a tag".getName )

Of course there may be differences among individuals, however, the rule: if it takes the same amount of effort, choose the solution which is best for more people. Using 't' or 'x' in the previous example is the same effort, but the first will make your code more easily readable for more people.

- TIP: Naming each local variable may be time consuming, however, by simply using an abbreviation of a meaningful name assigned to a variable or a datatype that is associated with the new variable, you can easily create names hardly without additional thinking. Example:

Good:

val numberCorrect = coreContentObjects.count( cco => cco.answerPlayerCorrect ) // where cco stands for CoreContent object, here derived from the already existing name "coreContentObjects" --> "coreContentObject" --> "cco".

Not good:

val numberCorrect = coreContentObjects.count( y => y.answerPlayerCorrect )


]

#### Assignments #####

- Within the source code:

A[name of developer]? Means: possibly suitable assignment for the given developer.
